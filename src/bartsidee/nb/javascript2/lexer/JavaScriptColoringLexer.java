/* The following code was generated by JFlex 1.4.3 on 9/17/13 2:01 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of
 * the License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. When distributing
 * the software, include this License Header Notice in each file and include
 * the License file at nbbuild/licenses/CDDL-GPL-2-CP. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided by
 * Oracle in the GPL Version 2 section of the License file that accompanied
 * this code. If applicable, add the following below the License Header, with
 * the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license." If you do not indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to its
 * licensees as provided above. However, if you add GPL Version 2 code and
 * therefore, elected the GPL Version 2 license, then the option applies only
 * if the new code is made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

package bartsidee.nb.javascript2.lexer;

import bartsidee.nb.javascript2.lexer.api.JsTokenId;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/17/13 2:01 PM from the specification file
 * <tt>/home/petr/mercurial/web-main/javascript2.editor/tools/JavaScriptColoringScanner.flex</tt>
 */
public final class JavaScriptColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGEXPEND = 14;
  public static final int LCOMMENTEND = 16;
  public static final int INITIAL = 2;
  public static final int SSTRINGEND = 10;
  public static final int STRINGEND = 6;
  public static final int ERROR = 18;
  public static final int SSTRING = 8;
  public static final int STRING = 4;
  public static final int REGEXP = 12;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\2\3\1\1\16\10\4\0\1\3\1\7\1\26"+
    "\1\6\1\11\1\102\1\76\1\30\1\63\1\64\1\5\1\100\1\70"+
    "\1\25\1\23\1\4\1\12\1\20\2\17\4\21\2\13\1\75\1\67"+
    "\1\72\1\62\1\71\1\74\1\0\3\16\1\22\1\24\1\22\5\11"+
    "\1\14\13\11\1\15\2\11\1\31\1\27\1\32\1\101\1\11\1\0"+
    "\1\36\1\33\1\40\1\50\1\35\1\52\1\51\1\43\1\46\1\11"+
    "\1\37\1\53\1\60\1\45\1\44\1\56\1\11\1\34\1\41\1\42"+
    "\1\47\1\57\1\55\1\61\1\54\1\11\1\65\1\77\1\66\1\73"+
    "\41\10\1\3\1\0\4\11\4\0\1\11\2\0\1\10\7\0\1\11"+
    "\4\0\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11"+
    "\16\0\5\11\7\0\1\11\1\0\1\11\21\0\160\10\5\11\1\0"+
    "\2\11\2\0\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0"+
    "\24\11\1\0\123\11\1\0\213\11\1\0\5\10\2\0\236\11\11\0"+
    "\46\11\2\0\1\11\7\0\47\11\11\0\55\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\10\10\0\33\11\5\0\3\11\15\0"+
    "\4\10\7\0\1\11\4\0\13\10\5\0\53\11\37\10\4\0\2\11"+
    "\1\10\143\11\1\0\1\11\10\10\1\0\6\10\2\11\2\10\1\0"+
    "\4\10\2\11\12\10\3\11\2\0\1\11\17\0\1\10\1\11\1\10"+
    "\36\11\33\10\2\0\131\11\13\10\1\11\16\0\12\10\41\11\11\10"+
    "\2\11\4\0\1\11\5\0\26\11\4\10\1\11\11\10\1\11\3\10"+
    "\1\11\5\10\22\0\31\11\3\10\244\0\4\10\66\11\3\10\1\11"+
    "\22\10\1\11\7\10\12\11\2\10\2\0\12\10\1\0\7\11\1\0"+
    "\7\11\1\0\3\10\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\1\11\3\0\4\11\2\0\1\10\1\11\7\10\2\0"+
    "\2\10\2\0\3\10\1\11\10\0\1\10\4\0\2\11\1\0\3\11"+
    "\2\10\2\0\12\10\4\11\7\0\1\11\5\0\3\10\1\0\6\11"+
    "\4\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\2\11"+
    "\1\0\2\11\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10"+
    "\3\0\1\10\7\0\4\11\1\0\1\11\7\0\14\10\3\11\1\10"+
    "\13\0\3\10\1\0\11\11\1\0\3\11\1\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\5\11\2\0\1\10\1\11\10\10\1\0\3\10"+
    "\1\0\3\10\2\0\1\11\17\0\2\11\2\10\2\0\12\10\1\0"+
    "\1\11\17\0\3\10\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\1\10\1\11\7\10\2\0"+
    "\2\10\2\0\3\10\10\0\2\10\4\0\2\11\1\0\3\11\2\10"+
    "\2\0\12\10\1\0\1\11\20\0\1\10\1\11\1\0\6\11\3\0"+
    "\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0"+
    "\2\11\3\0\3\11\3\0\14\11\4\0\5\10\3\0\3\10\1\0"+
    "\4\10\2\0\1\11\6\0\1\10\16\0\12\10\11\0\1\11\7\0"+
    "\3\10\1\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0"+
    "\5\11\3\0\1\11\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\1\0\2\11\6\0\2\11\2\10\2\0\12\10\22\0\2\10\1\0"+
    "\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11\2\0"+
    "\1\10\1\11\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0"+
    "\1\11\1\0\2\11\2\10\2\0\12\10\1\0\2\11\17\0\2\10"+
    "\1\0\10\11\1\0\3\11\1\0\51\11\2\0\1\11\7\10\1\0"+
    "\3\10\1\0\4\10\1\11\10\0\1\10\10\0\2\11\2\10\2\0"+
    "\12\10\12\0\6\11\2\0\2\10\1\0\22\11\3\0\30\11\1\0"+
    "\11\11\1\0\1\11\2\0\7\11\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\22\0\2\10\15\0\60\11\1\10\2\11\7\10"+
    "\4\0\10\11\10\10\1\0\12\10\47\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\10"+
    "\2\11\6\10\1\0\2\10\1\11\2\0\5\11\1\0\1\11\1\0"+
    "\6\10\2\0\12\10\2\0\2\11\42\0\1\11\27\0\2\10\6\0"+
    "\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\11"+
    "\1\0\44\11\4\0\24\10\1\0\2\10\5\11\13\10\1\0\44\10"+
    "\11\0\1\10\71\0\53\11\24\10\1\11\12\10\6\0\6\11\4\10"+
    "\4\11\3\10\1\11\3\10\2\11\7\10\3\11\4\10\15\11\14\10"+
    "\1\11\17\10\2\0\46\11\12\0\53\11\1\0\1\11\3\0\u0149\11"+
    "\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11"+
    "\1\0\4\11\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11"+
    "\1\0\4\11\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11"+
    "\2\0\3\10\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11"+
    "\1\0\32\11\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11"+
    "\3\10\13\0\22\11\3\10\13\0\22\11\2\10\14\0\15\11\1\0"+
    "\3\11\1\0\2\10\14\0\64\11\40\10\3\0\1\11\3\0\2\11"+
    "\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\11\10\0"+
    "\51\11\1\10\1\11\5\0\106\11\12\0\35\11\3\0\14\10\4\0"+
    "\14\10\12\0\12\10\36\11\2\0\5\11\13\0\54\11\4\0\21\10"+
    "\7\11\2\10\6\0\12\10\46\0\27\11\5\10\4\0\65\11\12\10"+
    "\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\11\130\0\5\10"+
    "\57\11\21\10\7\11\4\0\12\10\21\0\11\10\14\0\3\10\36\11"+
    "\12\10\3\0\2\11\12\10\6\0\46\11\16\10\14\0\44\11\24\10"+
    "\10\0\12\10\3\0\3\11\12\10\44\11\122\0\3\10\1\0\25\10"+
    "\4\11\1\10\4\11\1\10\15\0\300\11\47\10\25\0\4\10\u0116\11"+
    "\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11"+
    "\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11"+
    "\4\0\15\11\5\0\3\11\1\0\7\11\16\0\5\10\32\0\5\10"+
    "\20\0\2\11\23\0\1\11\13\0\5\10\5\0\6\10\1\0\1\11"+
    "\15\0\1\11\20\0\15\11\3\0\32\11\26\0\15\10\4\0\1\10"+
    "\3\0\14\10\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11"+
    "\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11"+
    "\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11"+
    "\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\4\11\3\10\16\0"+
    "\46\11\12\0\66\11\11\0\1\11\17\0\1\10\27\11\11\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\40\10\57\0\1\11\u01d5\0\3\11"+
    "\31\0\11\11\6\10\1\0\5\11\2\0\5\11\4\0\126\11\2\0"+
    "\2\10\2\0\3\11\1\0\132\11\1\0\4\11\5\0\51\11\3\0"+
    "\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0\u51cc\11\64\0"+
    "\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\10\2\11\24\0"+
    "\57\11\1\10\14\0\2\10\1\0\31\11\10\0\120\11\2\10\45\0"+
    "\11\11\2\0\147\11\2\0\4\11\1\0\2\11\16\0\12\11\120\0"+
    "\10\11\1\10\3\11\1\10\4\11\1\10\27\11\5\10\20\0\1\11"+
    "\7\0\64\11\14\0\2\10\62\11\21\10\13\0\12\10\6\0\22\10"+
    "\6\11\3\0\1\11\4\0\12\10\34\11\10\10\2\0\27\11\15\10"+
    "\14\0\35\11\3\0\4\10\57\11\16\10\16\0\1\11\12\10\46\0"+
    "\51\11\16\10\11\0\3\11\1\10\10\11\2\10\2\0\12\10\6\0"+
    "\27\11\3\0\1\11\1\10\4\0\60\11\1\10\1\11\3\10\2\11"+
    "\2\10\5\11\2\10\1\11\1\10\1\11\30\0\3\11\43\0\6\11"+
    "\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0\43\11"+
    "\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\11\14\0\27\11\4\0"+
    "\61\11\u2104\0\u012e\11\2\0\76\11\2\0\152\11\46\0\7\11\14\0"+
    "\5\11\5\0\1\11\1\10\12\11\1\0\15\11\1\0\5\11\1\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0"+
    "\100\11\2\0\66\11\50\0\15\11\3\0\20\10\20\0\7\10\14\0"+
    "\2\11\30\0\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0"+
    "\1\10\4\0\1\11\13\0\12\10\7\0\32\11\4\0\1\11\1\0"+
    "\32\11\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0"+
    "\3\11\3\0\2\11\3\0\2\11\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\0\2\2\1\3\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\17\11\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\43\1\44\1\3"+
    "\1\45\1\42\2\46\1\3\1\47\4\50\1\51\2\1"+
    "\1\3\1\43\1\52\1\3\1\53\1\54\1\55\3\12"+
    "\1\0\3\12\1\0\1\56\1\57\20\11\1\60\1\61"+
    "\2\11\1\62\15\11\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\0\4\42\1\0\1\42\1\0\1\100\6\0\1\101"+
    "\4\12\1\0\16\11\1\102\3\11\1\103\10\11\1\104"+
    "\2\11\1\105\7\11\1\106\1\11\1\107\1\110\1\111"+
    "\1\112\2\0\1\113\2\12\2\11\1\114\1\115\2\11"+
    "\1\116\7\11\1\117\1\11\1\120\1\11\1\121\14\11"+
    "\1\122\4\11\1\123\1\124\1\0\2\12\1\125\3\11"+
    "\1\126\1\127\1\11\1\130\1\11\1\131\1\11\1\132"+
    "\10\11\1\133\2\11\1\134\1\135\4\11\1\136\2\12"+
    "\1\137\1\11\1\140\1\11\1\141\1\142\1\143\2\11"+
    "\1\144\3\11\1\145\5\11\1\146\2\12\1\147\5\11"+
    "\1\150\1\151\2\11\1\152\1\153\2\12\1\154\3\11"+
    "\1\155\1\156\1\11\2\12\1\11\1\157\1\11\1\160"+
    "\2\12\1\161\1\162\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\5\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u029e\0\u0324\0\u029e\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u029e\0\u029e\0\u029e\0\u029e\0\u05c2\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u09af\0\u029e\0\u029e\0\u029e\0\u029e"+
    "\0\u029e\0\u029e\0\u09f2\0\u0a35\0\u029e\0\u029e\0\u029e\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u029e\0\u029e"+
    "\0\u0c4d\0\u029e\0\u0c90\0\u0cd3\0\u029e\0\u0d16\0\u029e\0\u0d59"+
    "\0\u029e\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u029e\0\u0ea8\0\u0ea8"+
    "\0\u0eeb\0\u0f2e\0\u029e\0\u029e\0\u0f71\0\u0fb4\0\u0ff7\0\u029e"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u029e\0\u029e\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u0473\0\u15fc\0\u163f\0\u0473\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u19a6\0\u19e9\0\u029e\0\u1a2c\0\u029e\0\u1a6f\0\u029e\0\u029e"+
    "\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u1ab2\0\u029e"+
    "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u0d59\0\u029e\0\u0d9c"+
    "\0\u0ddf\0\u1c44\0\u0ea8\0\u1c87\0\u1cca\0\u029e\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180"+
    "\0\u21c3\0\u0473\0\u2206\0\u2249\0\u228c\0\u0473\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u0473\0\u24e7"+
    "\0\u252a\0\u0473\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u0473\0\u2742\0\u029e\0\u029e\0\u2785\0\u029e\0\u27c8"+
    "\0\u280b\0\u029e\0\u284e\0\u2891\0\u28d4\0\u2917\0\u0473\0\u0473"+
    "\0\u295a\0\u299d\0\u0473\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u0473\0\u2bb5\0\u0473\0\u2bf8\0\u0473\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u0473\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028"+
    "\0\u0473\0\u029e\0\u306b\0\u30ae\0\u30f1\0\u0473\0\u3134\0\u3177"+
    "\0\u31ba\0\u0473\0\u0473\0\u31fd\0\u0473\0\u3240\0\u0473\0\u3283"+
    "\0\u0473\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458"+
    "\0\u349b\0\u0473\0\u34de\0\u3521\0\u0473\0\u0473\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u029e\0\u3670\0\u36b3\0\u0473\0\u36f6\0\u0473"+
    "\0\u3739\0\u0473\0\u0473\0\u0473\0\u377c\0\u37bf\0\u0473\0\u3802"+
    "\0\u3845\0\u3888\0\u0473\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u0473\0\u3a1a\0\u3a5d\0\u0473\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69"+
    "\0\u3bac\0\u0473\0\u0473\0\u3bef\0\u3c32\0\u0473\0\u0473\0\u3c75"+
    "\0\u3cb8\0\u0473\0\u3cfb\0\u3d3e\0\u3d81\0\u0473\0\u0473\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u0473\0\u3ed0\0\u0473\0\u3f13\0\u3f56"+
    "\0\u0473\0\u0473\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8"+
    "\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300"+
    "\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\13\1\14\74\13\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\15\1\23\1\15\1\24\1\25\1\26\3\24"+
    "\3\26\1\24\1\27\1\24\1\30\1\31\1\15\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\24\1\40\1\41"+
    "\1\42\2\24\1\43\1\44\1\24\1\45\1\24\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\24\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\23\75\1\100\1\101\53\75\26\15\1\102"+
    "\54\15\1\103\1\104\1\105\24\103\1\106\1\107\52\103"+
    "\30\15\1\102\52\15\1\110\1\111\1\15\1\110\2\111"+
    "\21\110\1\112\1\110\1\113\51\110\2\111\1\15\1\111"+
    "\1\114\76\111\1\15\1\115\1\116\100\15\1\117\1\120"+
    "\1\77\100\117\112\0\1\121\75\0\1\17\103\0\1\20"+
    "\103\0\1\121\1\122\54\0\1\123\102\0\1\124\102\0"+
    "\1\125\30\0\13\24\1\0\1\24\6\0\27\24\33\0"+
    "\1\126\1\127\1\130\1\131\1\0\1\132\1\133\1\132"+
    "\1\130\1\134\1\135\10\0\1\135\12\0\1\130\1\0"+
    "\2\130\5\0\1\131\33\0\2\26\1\130\2\0\3\26"+
    "\1\130\1\134\1\135\10\0\1\135\12\0\1\130\1\0"+
    "\2\130\41\0\2\134\3\0\3\134\106\0\1\136\34\0"+
    "\1\137\30\0\13\24\1\0\1\24\6\0\1\24\1\140"+
    "\25\24\31\0\13\24\1\0\1\24\6\0\2\24\1\141"+
    "\24\24\31\0\13\24\1\0\1\24\6\0\12\24\1\142"+
    "\5\24\1\143\5\24\1\144\31\0\13\24\1\0\1\24"+
    "\6\0\3\24\1\145\5\24\1\146\6\24\1\147\6\24"+
    "\31\0\13\24\1\0\1\24\6\0\7\24\1\150\4\24"+
    "\1\151\5\24\1\152\4\24\31\0\13\24\1\0\1\24"+
    "\6\0\1\24\1\153\6\24\1\154\10\24\1\155\5\24"+
    "\31\0\13\24\1\0\1\24\6\0\2\24\1\156\11\24"+
    "\1\157\12\24\31\0\13\24\1\0\1\24\6\0\12\24"+
    "\1\160\4\24\1\161\5\24\1\162\1\24\31\0\13\24"+
    "\1\0\1\24\6\0\2\24\1\163\6\24\1\164\15\24"+
    "\31\0\13\24\1\0\1\24\6\0\3\24\1\165\5\24"+
    "\1\166\1\24\1\167\1\170\12\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\171\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\13\24\1\172\13\24\31\0\13\24\1\0"+
    "\1\24\6\0\10\24\1\173\2\24\1\174\13\24\31\0"+
    "\13\24\1\0\1\24\6\0\1\24\1\175\1\24\1\176"+
    "\10\24\1\177\12\24\31\0\13\24\1\0\1\24\6\0"+
    "\3\24\1\200\5\24\1\201\15\24\103\0\1\202\102\0"+
    "\1\203\6\0\1\204\73\0\1\205\7\0\1\206\72\0"+
    "\1\207\13\0\1\210\66\0\1\211\14\0\1\212\65\0"+
    "\1\213\15\0\1\214\64\0\1\215\102\0\1\216\20\0"+
    "\1\75\2\0\23\75\1\0\1\217\53\75\2\0\1\77"+
    "\100\0\1\220\1\221\1\75\7\220\1\222\4\220\2\222"+
    "\1\223\61\220\1\103\2\0\24\103\1\224\1\0\52\103"+
    "\2\0\1\105\100\0\1\220\1\225\1\103\7\220\1\222"+
    "\4\220\2\222\1\223\61\220\1\226\2\0\1\226\1\227"+
    "\22\226\1\230\1\226\1\231\52\226\2\0\100\226\1\231"+
    "\2\0\24\231\1\232\2\231\1\226\50\231\10\0\13\114"+
    "\1\0\1\114\6\0\27\114\23\0\1\116\100\0\1\233"+
    "\1\120\1\77\100\233\1\121\2\0\100\121\5\234\1\235"+
    "\75\234\62\0\1\236\32\0\1\126\1\127\1\130\2\0"+
    "\1\132\1\133\1\132\1\130\1\134\1\135\10\0\1\135"+
    "\12\0\1\130\1\0\2\130\41\0\2\127\3\0\3\127"+
    "\1\130\1\134\1\135\10\0\1\135\12\0\1\130\1\0"+
    "\1\130\42\0\1\237\1\240\2\0\5\240\1\0\1\240"+
    "\6\0\1\240\1\0\2\240\1\0\1\240\7\0\1\240"+
    "\1\0\1\240\42\0\1\241\1\127\1\130\2\0\3\241"+
    "\1\130\1\134\1\135\10\0\1\135\12\0\1\130\1\0"+
    "\2\130\41\0\1\132\1\127\1\130\2\0\3\132\1\130"+
    "\1\134\1\135\10\0\1\135\12\0\1\130\1\0\2\130"+
    "\41\0\2\134\3\0\3\134\1\130\1\0\1\135\10\0"+
    "\1\135\12\0\1\130\1\0\1\130\42\0\2\242\3\0"+
    "\3\242\3\0\1\243\52\0\1\243\12\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\244\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\7\24\1\245\17\24\31\0\13\24\1\0"+
    "\1\24\6\0\14\24\1\246\12\24\31\0\13\24\1\0"+
    "\1\24\6\0\6\24\1\247\20\24\31\0\13\24\1\0"+
    "\1\24\6\0\7\24\1\250\13\24\1\251\3\24\31\0"+
    "\13\24\1\0\1\24\6\0\6\24\1\252\1\253\17\24"+
    "\31\0\13\24\1\0\1\24\6\0\12\24\1\254\14\24"+
    "\31\0\13\24\1\0\1\24\6\0\3\24\1\255\23\24"+
    "\31\0\13\24\1\0\1\24\6\0\3\24\1\256\23\24"+
    "\31\0\13\24\1\0\1\24\6\0\23\24\1\257\3\24"+
    "\31\0\13\24\1\0\1\24\6\0\13\24\1\260\13\24"+
    "\31\0\13\24\1\0\1\24\6\0\14\24\1\261\4\24"+
    "\1\262\5\24\31\0\13\24\1\0\1\24\6\0\1\24"+
    "\1\263\11\24\1\264\13\24\31\0\13\24\1\0\1\24"+
    "\6\0\23\24\1\265\3\24\31\0\13\24\1\0\1\24"+
    "\6\0\22\24\1\266\4\24\31\0\13\24\1\0\1\24"+
    "\6\0\20\24\1\267\6\24\31\0\13\24\1\0\1\24"+
    "\6\0\6\24\1\270\1\271\17\24\31\0\13\24\1\0"+
    "\1\24\6\0\23\24\1\272\3\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\273\16\24\1\274\1\275\6\24\31\0"+
    "\13\24\1\0\1\24\6\0\20\24\1\276\6\24\31\0"+
    "\13\24\1\0\1\24\6\0\1\24\1\277\25\24\31\0"+
    "\13\24\1\0\1\24\6\0\12\24\1\300\14\24\31\0"+
    "\13\24\1\0\1\24\6\0\12\24\1\301\14\24\31\0"+
    "\13\24\1\0\1\24\6\0\7\24\1\302\17\24\31\0"+
    "\13\24\1\0\1\24\6\0\2\24\1\303\24\24\31\0"+
    "\13\24\1\0\1\24\6\0\13\24\1\304\13\24\31\0"+
    "\13\24\1\0\1\24\6\0\7\24\1\305\17\24\31\0"+
    "\13\24\1\0\1\24\6\0\11\24\1\306\1\24\1\307"+
    "\13\24\31\0\13\24\1\0\1\24\6\0\5\24\1\310"+
    "\21\24\31\0\13\24\1\0\1\24\6\0\1\311\26\24"+
    "\31\0\13\24\1\0\1\24\6\0\1\24\1\312\25\24"+
    "\31\0\13\24\1\0\1\24\6\0\13\24\1\313\13\24"+
    "\103\0\1\314\102\0\1\315\6\0\1\316\73\0\1\317"+
    "\21\0\1\221\1\75\100\0\1\75\1\0\24\75\1\0"+
    "\1\217\53\75\12\0\1\223\4\0\3\223\73\0\1\220"+
    "\4\0\3\220\62\0\1\225\1\103\100\0\1\103\1\0"+
    "\25\103\1\224\1\0\52\103\1\231\2\0\100\231\5\234"+
    "\1\320\75\234\4\321\1\322\1\235\75\321\12\0\1\237"+
    "\1\240\1\130\1\0\5\240\1\0\1\240\6\0\1\240"+
    "\1\0\2\240\1\0\1\240\7\0\1\240\1\0\1\240"+
    "\1\130\41\0\2\323\1\130\1\0\5\323\1\0\1\323"+
    "\6\0\1\323\1\0\2\323\1\0\1\323\7\0\1\323"+
    "\1\0\1\323\1\130\41\0\1\324\1\127\1\130\2\0"+
    "\3\324\1\130\1\134\1\135\10\0\1\135\12\0\1\130"+
    "\1\0\2\130\41\0\2\242\3\0\3\242\1\130\25\0"+
    "\1\130\1\0\1\130\42\0\2\242\3\0\3\242\71\0"+
    "\13\24\1\0\1\24\6\0\3\24\1\325\23\24\31\0"+
    "\13\24\1\0\1\24\6\0\14\24\1\326\12\24\31\0"+
    "\13\24\1\0\1\24\6\0\25\24\1\327\1\24\31\0"+
    "\13\24\1\0\1\24\6\0\2\24\1\330\24\24\31\0"+
    "\13\24\1\0\1\24\6\0\2\24\1\331\24\24\31\0"+
    "\13\24\1\0\1\24\6\0\11\24\1\332\15\24\31\0"+
    "\13\24\1\0\1\24\6\0\2\24\1\333\24\24\31\0"+
    "\13\24\1\0\1\24\6\0\5\24\1\334\21\24\31\0"+
    "\13\24\1\0\1\24\6\0\6\24\1\335\1\336\17\24"+
    "\31\0\13\24\1\0\1\24\6\0\6\24\1\337\20\24"+
    "\31\0\13\24\1\0\1\24\6\0\7\24\1\340\17\24"+
    "\31\0\13\24\1\0\1\24\6\0\2\24\1\341\24\24"+
    "\31\0\13\24\1\0\1\24\6\0\7\24\1\342\17\24"+
    "\31\0\13\24\1\0\1\24\6\0\2\24\1\343\24\24"+
    "\31\0\13\24\1\0\1\24\6\0\11\24\1\344\15\24"+
    "\31\0\13\24\1\0\1\24\6\0\6\24\1\345\20\24"+
    "\31\0\13\24\1\0\1\24\6\0\2\24\1\346\24\24"+
    "\31\0\13\24\1\0\1\24\6\0\20\24\1\347\6\24"+
    "\31\0\13\24\1\0\1\24\6\0\7\24\1\350\17\24"+
    "\31\0\13\24\1\0\1\24\6\0\2\24\1\351\24\24"+
    "\31\0\13\24\1\0\1\24\6\0\11\24\1\352\6\24"+
    "\1\353\6\24\31\0\13\24\1\0\1\24\6\0\14\24"+
    "\1\354\12\24\31\0\13\24\1\0\1\24\6\0\3\24"+
    "\1\355\23\24\31\0\13\24\1\0\1\24\6\0\2\24"+
    "\1\356\24\24\31\0\13\24\1\0\1\24\6\0\6\24"+
    "\1\357\20\24\31\0\13\24\1\0\1\24\6\0\3\24"+
    "\1\360\23\24\31\0\13\24\1\0\1\24\6\0\5\24"+
    "\1\361\21\24\31\0\13\24\1\0\1\24\6\0\20\24"+
    "\1\362\6\24\31\0\13\24\1\0\1\24\6\0\20\24"+
    "\1\363\6\24\31\0\13\24\1\0\1\24\6\0\10\24"+
    "\1\364\16\24\31\0\13\24\1\0\1\24\6\0\7\24"+
    "\1\365\17\24\31\0\13\24\1\0\1\24\6\0\24\24"+
    "\1\366\2\24\31\0\13\24\1\0\1\24\6\0\4\24"+
    "\1\367\22\24\31\0\13\24\1\0\1\24\6\0\20\24"+
    "\1\370\6\24\31\0\13\24\1\0\1\24\6\0\15\24"+
    "\1\371\11\24\103\0\1\372\20\0\4\234\1\322\1\320"+
    "\75\234\5\321\1\373\75\321\12\0\2\374\1\130\1\0"+
    "\5\374\1\0\1\374\6\0\1\374\1\0\2\374\1\0"+
    "\1\374\7\0\1\374\1\0\1\374\1\130\41\0\1\375"+
    "\1\127\1\130\2\0\3\375\1\130\1\134\1\135\10\0"+
    "\1\135\12\0\1\130\1\0\2\130\37\0\13\24\1\0"+
    "\1\24\6\0\4\24\1\376\22\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\24\1\377\25\24\31\0\13\24\1\0"+
    "\1\24\6\0\12\24\1\u0100\14\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\24\1\u0101\25\24\31\0\13\24\1\0"+
    "\1\24\6\0\10\24\1\u0102\16\24\31\0\13\24\1\0"+
    "\1\24\6\0\7\24\1\u0103\17\24\31\0\13\24\1\0"+
    "\1\24\6\0\13\24\1\u0104\13\24\31\0\13\24\1\0"+
    "\1\24\6\0\6\24\1\u0105\20\24\31\0\13\24\1\0"+
    "\1\24\6\0\13\24\1\u0106\13\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\24\1\u0107\25\24\31\0\13\24\1\0"+
    "\1\24\6\0\5\24\1\u0108\21\24\31\0\13\24\1\0"+
    "\1\24\6\0\22\24\1\u0109\4\24\31\0\13\24\1\0"+
    "\1\24\6\0\11\24\1\u010a\15\24\31\0\13\24\1\0"+
    "\1\24\6\0\3\24\1\u010b\23\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\24\1\u010c\25\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\24\1\u010d\25\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u010e\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\16\24\1\u010f\10\24\31\0\13\24\1\0"+
    "\1\24\6\0\14\24\1\u0110\12\24\31\0\13\24\1\0"+
    "\1\24\6\0\7\24\1\u0111\17\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u0112\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\20\24\1\u0113\6\24\31\0\13\24\1\0"+
    "\1\24\6\0\7\24\1\u0114\17\24\31\0\13\24\1\0"+
    "\1\24\6\0\15\24\1\u0115\11\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u0116\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u0117\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\3\24\1\u0118\23\24\31\0\13\24\1\0"+
    "\1\24\6\0\3\24\1\u0119\23\24\31\0\13\24\1\0"+
    "\1\24\6\0\13\24\1\u011a\13\24\21\0\4\321\1\u011b"+
    "\1\373\75\321\12\0\2\u011c\1\130\1\0\5\u011c\1\0"+
    "\1\u011c\6\0\1\u011c\1\0\2\u011c\1\0\1\u011c\7\0"+
    "\1\u011c\1\0\1\u011c\1\130\41\0\1\u011d\1\127\1\130"+
    "\2\0\3\u011d\1\130\1\134\1\135\10\0\1\135\12\0"+
    "\1\130\1\0\2\130\37\0\13\24\1\0\1\24\6\0"+
    "\12\24\1\u011e\14\24\31\0\13\24\1\0\1\24\6\0"+
    "\15\24\1\u011f\11\24\31\0\13\24\1\0\1\24\6\0"+
    "\7\24\1\u0120\17\24\31\0\13\24\1\0\1\24\6\0"+
    "\12\24\1\u0121\14\24\31\0\13\24\1\0\1\24\6\0"+
    "\5\24\1\u0122\21\24\31\0\13\24\1\0\1\24\6\0"+
    "\10\24\1\u0123\16\24\31\0\13\24\1\0\1\24\6\0"+
    "\17\24\1\u0124\7\24\31\0\13\24\1\0\1\24\6\0"+
    "\12\24\1\u0125\14\24\31\0\13\24\1\0\1\24\6\0"+
    "\17\24\1\u0126\7\24\31\0\13\24\1\0\1\24\6\0"+
    "\7\24\1\u0127\17\24\31\0\13\24\1\0\1\24\6\0"+
    "\25\24\1\u0128\1\24\31\0\13\24\1\0\1\24\6\0"+
    "\16\24\1\u0129\10\24\31\0\13\24\1\0\1\24\6\0"+
    "\20\24\1\u012a\6\24\31\0\13\24\1\0\1\24\6\0"+
    "\2\24\1\u012b\24\24\31\0\13\24\1\0\1\24\6\0"+
    "\20\24\1\u012c\6\24\31\0\13\24\1\0\1\24\6\0"+
    "\13\24\1\u012d\13\24\31\0\13\24\1\0\1\24\6\0"+
    "\5\24\1\u012e\21\24\31\0\13\24\1\0\1\24\6\0"+
    "\7\24\1\u012f\17\24\31\0\13\24\1\0\1\24\6\0"+
    "\16\24\1\u0130\10\24\31\0\13\24\1\0\1\24\6\0"+
    "\5\24\1\u0131\21\24\33\0\2\u0132\1\130\1\0\5\u0132"+
    "\1\0\1\u0132\6\0\1\u0132\1\0\2\u0132\1\0\1\u0132"+
    "\7\0\1\u0132\1\0\1\u0132\1\130\41\0\1\u0133\1\127"+
    "\1\130\2\0\3\u0133\1\130\1\134\1\135\10\0\1\135"+
    "\12\0\1\130\1\0\2\130\37\0\13\24\1\0\1\24"+
    "\6\0\6\24\1\u0134\20\24\31\0\13\24\1\0\1\24"+
    "\6\0\14\24\1\u0135\12\24\31\0\13\24\1\0\1\24"+
    "\6\0\5\24\1\u0136\21\24\31\0\13\24\1\0\1\24"+
    "\6\0\3\24\1\u0137\23\24\31\0\13\24\1\0\1\24"+
    "\6\0\2\24\1\u0138\24\24\31\0\13\24\1\0\1\24"+
    "\6\0\2\24\1\u0139\24\24\31\0\13\24\1\0\1\24"+
    "\6\0\7\24\1\u013a\17\24\31\0\13\24\1\0\1\24"+
    "\6\0\21\24\1\u013b\5\24\31\0\13\24\1\0\1\24"+
    "\6\0\11\24\1\u013c\15\24\31\0\13\24\1\0\1\24"+
    "\6\0\7\24\1\u013d\17\24\31\0\13\24\1\0\1\24"+
    "\6\0\2\24\1\u013e\24\24\31\0\13\24\1\0\1\24"+
    "\6\0\2\24\1\u013f\24\24\33\0\2\u0140\1\130\1\0"+
    "\5\u0140\1\0\1\u0140\6\0\1\u0140\1\0\2\u0140\1\0"+
    "\1\u0140\7\0\1\u0140\1\0\1\u0140\1\130\41\0\1\u0141"+
    "\1\127\1\130\2\0\3\u0141\1\130\1\134\1\135\10\0"+
    "\1\135\12\0\1\130\1\0\2\130\37\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u0142\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u0143\24\24\31\0\13\24\1\0"+
    "\1\24\6\0\5\24\1\u0144\21\24\31\0\13\24\1\0"+
    "\1\24\6\0\12\24\1\u0145\14\24\31\0\13\24\1\0"+
    "\1\24\6\0\1\24\1\u0146\25\24\31\0\13\24\1\0"+
    "\1\24\6\0\12\24\1\u0147\14\24\31\0\13\24\1\0"+
    "\1\24\6\0\2\24\1\u0148\24\24\33\0\2\u0149\1\130"+
    "\1\0\5\u0149\1\0\1\u0149\6\0\1\u0149\1\0\2\u0149"+
    "\1\0\1\u0149\7\0\1\u0149\1\0\1\u0149\1\130\41\0"+
    "\1\u014a\1\127\1\130\2\0\3\u014a\1\130\1\134\1\135"+
    "\10\0\1\135\12\0\1\130\1\0\2\130\37\0\13\24"+
    "\1\0\1\24\6\0\11\24\1\u014b\15\24\31\0\13\24"+
    "\1\0\1\24\6\0\2\24\1\u014c\24\24\31\0\13\24"+
    "\1\0\1\24\6\0\7\24\1\u014d\17\24\31\0\13\24"+
    "\1\0\1\24\6\0\15\24\1\u014e\11\24\33\0\2\u014f"+
    "\1\130\1\0\5\u014f\1\0\1\u014f\6\0\1\u014f\1\0"+
    "\2\u014f\1\0\1\u014f\7\0\1\u014f\1\0\1\u014f\1\130"+
    "\41\0\1\u0150\1\127\1\130\2\0\3\u0150\1\130\1\134"+
    "\1\135\10\0\1\135\12\0\1\130\1\0\2\130\37\0"+
    "\13\24\1\0\1\24\6\0\17\24\1\u0151\7\24\31\0"+
    "\13\24\1\0\1\24\6\0\6\24\1\u0152\20\24\33\0"+
    "\2\u0153\1\130\1\0\5\u0153\1\0\1\u0153\6\0\1\u0153"+
    "\1\0\2\u0153\1\0\1\u0153\7\0\1\u0153\1\0\1\u0153"+
    "\1\130\41\0\1\u0154\1\127\1\130\2\0\3\u0154\1\130"+
    "\1\134\1\135\10\0\1\135\12\0\1\130\1\0\2\130"+
    "\41\0\2\u0155\1\130\1\0\5\u0155\1\0\1\u0155\6\0"+
    "\1\u0155\1\0\2\u0155\1\0\1\u0155\7\0\1\u0155\1\0"+
    "\1\u0155\1\130\41\0\1\u0156\1\127\1\130\2\0\3\u0156"+
    "\1\130\1\134\1\135\10\0\1\135\12\0\1\130\1\0"+
    "\2\130\41\0\2\u0157\1\130\1\0\5\u0157\1\0\1\u0157"+
    "\6\0\1\u0157\1\0\2\u0157\1\0\1\u0157\7\0\1\u0157"+
    "\1\0\1\u0157\1\130\41\0\1\u0158\1\127\1\130\2\0"+
    "\3\u0158\1\130\1\134\1\135\10\0\1\135\12\0\1\130"+
    "\1\0\2\130\41\0\2\u0159\1\130\1\0\5\u0159\1\0"+
    "\1\u0159\6\0\1\u0159\1\0\2\u0159\1\0\1\u0159\7\0"+
    "\1\u0159\1\0\1\u0159\1\130\41\0\1\u015a\1\127\1\130"+
    "\2\0\3\u015a\1\130\1\134\1\135\10\0\1\135\12\0"+
    "\1\130\1\0\2\130\41\0\2\u015b\1\130\1\0\5\u015b"+
    "\1\0\1\u015b\6\0\1\u015b\1\0\2\u015b\1\0\1\u015b"+
    "\7\0\1\u015b\1\0\1\u015b\1\130\41\0\1\u015c\1\127"+
    "\1\130\2\0\3\u015c\1\130\1\134\1\135\10\0\1\135"+
    "\12\0\1\130\1\0\2\130\41\0\2\u015d\1\130\1\0"+
    "\5\u015d\1\0\1\u015d\6\0\1\u015d\1\0\2\u015d\1\0"+
    "\1\u015d\7\0\1\u015d\1\0\1\u015d\1\130\41\0\1\u015e"+
    "\1\127\1\130\2\0\3\u015e\1\130\1\134\1\135\10\0"+
    "\1\135\12\0\1\130\1\0\2\130\41\0\2\u015f\1\130"+
    "\1\0\5\u015f\1\0\1\u015f\6\0\1\u015f\1\0\2\u015f"+
    "\1\0\1\u015f\7\0\1\u015f\1\0\1\u015f\1\130\41\0"+
    "\1\u0160\1\127\1\130\2\0\3\u0160\1\130\1\134\1\135"+
    "\10\0\1\135\12\0\1\130\1\0\2\130\41\0\2\u0161"+
    "\1\130\1\0\5\u0161\1\0\1\u0161\6\0\1\u0161\1\0"+
    "\2\u0161\1\0\1\u0161\7\0\1\u0161\1\0\1\u0161\1\130"+
    "\41\0\1\u0162\1\127\1\130\2\0\3\u0162\1\130\1\134"+
    "\1\135\10\0\1\135\12\0\1\130\1\0\2\130\43\0"+
    "\1\130\36\0\1\130\41\0\1\u0163\1\127\1\130\2\0"+
    "\3\u0163\1\130\1\134\1\135\10\0\1\135\12\0\1\130"+
    "\1\0\2\130\41\0\1\u0164\1\127\1\130\2\0\3\u0164"+
    "\1\130\1\134\1\135\10\0\1\135\12\0\1\130\1\0"+
    "\2\130\41\0\1\u0165\1\127\1\130\2\0\3\u0165\1\130"+
    "\1\134\1\135\10\0\1\135\12\0\1\130\1\0\2\130"+
    "\41\0\1\u0166\1\127\1\130\2\0\3\u0166\1\130\1\134"+
    "\1\135\10\0\1\135\12\0\1\130\1\0\2\130\41\0"+
    "\2\127\1\130\2\0\3\127\1\130\1\134\1\135\10\0"+
    "\1\135\12\0\1\130\1\0\2\130\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17621];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\1\0\1\11\1\1\1\11\1\1\1\11"+
    "\11\1\4\11\20\1\6\11\2\1\3\11\7\1\2\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\4\1\1\11\4\1\2\11\3\1\1\11\1\0\3\1"+
    "\1\0\2\11\43\1\1\11\1\1\1\11\1\1\10\11"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\1\11\6\0"+
    "\1\11\4\1\1\0\50\1\2\11\1\1\1\11\2\0"+
    "\1\11\47\1\1\11\1\0\37\1\1\11\67\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LexerInput input;

    private boolean embedded;

    private boolean canFollowLiteral = true;

    private boolean canFollowKeyword = true;

    public JavaScriptColoringLexer(LexerRestartInfo info) {
        this.input = info.input();

        this.embedded = !JsTokenId.JAVASCRIPT_MIME_TYPE.equals(info.languagePath().mimePath());
        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
        }
    }

    public LexerState getState() {
        if (zzState == YYINITIAL && zzLexicalState == YYINITIAL
                && canFollowLiteral && canFollowKeyword) {
            return null;
        }
        return new LexerState(zzState, zzLexicalState, canFollowLiteral, canFollowKeyword);
    }

    public void setState(LexerState state) {
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.canFollowLiteral = state.canFollowLiteral;
        this.canFollowKeyword = state.canFollowKeyword;
    }

    public JsTokenId nextToken() throws java.io.IOException {
        JsTokenId token = yylex();
        if (token != null && !JsTokenId.ERROR.equals(token)
                && !JsTokenId.UNKNOWN.equals(token)
                && !JsTokenId.WHITESPACE.equals(token)
                && !JsTokenId.LINE_COMMENT.equals(token)
                && !JsTokenId.BLOCK_COMMENT.equals(token)
                && !JsTokenId.DOC_COMMENT.equals(token)) {
            canFollowLiteral = canFollowLiteral(token);
            canFollowKeyword = canFollowKeyword(token);
        }
        return token;
    }

    private JsTokenId getErrorToken() {
        if (embedded) {
            return JsTokenId.UNKNOWN;
        }
        return JsTokenId.ERROR;
    }

    private static boolean canFollowLiteral(JsTokenId token) {
        if ("operator".equals(token.primaryCategory())) {
            return true;
        }

        switch (token) {
            case BRACKET_LEFT_CURLY:
            case BRACKET_LEFT_PAREN:
            case BRACKET_LEFT_BRACKET:
            case KEYWORD_RETURN:
            case KEYWORD_THROW:
            case RESERVED_YIELD:
            // unary operators (keyword)
            case KEYWORD_TYPEOF:
            // end of line
            case EOL:
            case OPERATOR_SEMICOLON:
            case OPERATOR_COMMA:
            case OPERATOR_DOT:
            case OPERATOR_COLON:
                return true;
        }
        return false;
    }

    private static boolean canFollowKeyword(JsTokenId token) {
        if (JsTokenId.OPERATOR_DOT.equals(token)) {
            return false;
        }
        return true;
    }

    public static final class LexerState  {
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;
        /** can be the literal used here */
        final boolean canFollowLiteral;
        /** can be the literal used here */
        final boolean canFollowKeyword;

        LexerState (int zzState, int zzLexicalState, boolean canFollowLiteral, boolean canFollowKeyword) {
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.canFollowLiteral = canFollowLiteral;
            this.canFollowKeyword = canFollowKeyword;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final LexerState other = (LexerState) obj;
            if (this.zzState != other.zzState) {
                return false;
            }
            if (this.zzLexicalState != other.zzLexicalState) {
                return false;
            }
            if (this.canFollowLiteral != other.canFollowLiteral) {
                return false;
            }
            if (this.canFollowKeyword != other.canFollowKeyword) {
                return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 29 * hash + this.zzState;
            hash = 29 * hash + this.zzLexicalState;
            hash = 29 * hash + (this.canFollowLiteral ? 1 : 0);
            hash = 29 * hash + (this.canFollowKeyword ? 1 : 0);
            return hash;
        }

        @Override
        public String toString() {
            return "LexerState{" + "zzState=" + zzState + ", zzLexicalState=" + zzLexicalState + ", canFollowLiteral=" + canFollowLiteral + ", canFollowKeyword=" + canFollowKeyword + '}';
        }
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JsTokenId yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          zzInput = input.read();

          if(zzInput == LexerInput.EOF) {
              //end of input reached
            zzInput = YYEOF;
            break zzForAction;
              //notice: currently LexerInput.EOF == YYEOF
          }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return JsTokenId.BRACKET_LEFT_PAREN;
          }
        case 115: break;
        case 49: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_IF;
          }
        case 116: break;
        case 26: 
          { return JsTokenId.OPERATOR_BITWISE_NOT;
          }
        case 117: break;
        case 56: 
          { return JsTokenId.OPERATOR_BITWISE_AND_ASSIGNMENT;
          }
        case 118: break;
        case 111: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_INTERFACE;
          }
        case 119: break;
        case 36: 
          { yypushback(1);
                                     yybegin(STRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 120: break;
        case 94: 
          { return JsTokenId.DOC_COMMENT;
          }
        case 121: break;
        case 44: 
          { return JsTokenId.OPERATOR_MULTIPLICATION_ASSIGNMENT;
          }
        case 122: break;
        case 8: 
          { return JsTokenId.OPERATOR_NOT;
          }
        case 123: break;
        case 14: 
          { yybegin(SSTRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 124: break;
        case 88: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_CLASS;
          }
        case 125: break;
        case 103: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_EXTENDS;
          }
        case 126: break;
        case 74: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 127: break;
        case 51: 
          { return JsTokenId.OPERATOR_EQUALS;
          }
        case 128: break;
        case 28: 
          { return JsTokenId.OPERATOR_COLON;
          }
        case 129: break;
        case 114: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_IMPLEMENTS;
          }
        case 130: break;
        case 47: 
          { return JsTokenId.OPERATOR_MINUS_ASSIGNMENT;
          }
        case 131: break;
        case 20: 
          { return JsTokenId.BRACKET_LEFT_CURLY;
          }
        case 132: break;
        case 30: 
          { return JsTokenId.OPERATOR_BITWISE_OR;
          }
        case 133: break;
        case 108: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CONTINUE;
          }
        case 134: break;
        case 22: 
          { return JsTokenId.OPERATOR_SEMICOLON;
          }
        case 135: break;
        case 84: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ASSIGNMENT;
          }
        case 136: break;
        case 55: 
          { return JsTokenId.OPERATOR_LEFT_SHIFT_ARITHMETIC;
          }
        case 137: break;
        case 105: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_FINALLY;
          }
        case 138: break;
        case 35: 
          { yypushback(1);
                                     yybegin(INITIAL);
                                     if (tokenLength - 1 > 0) {
                                         return getErrorToken();
                                     }
          }
        case 139: break;
        case 100: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_IMPORT;
          }
        case 140: break;
        case 27: 
          { return JsTokenId.OPERATOR_TERNARY;
          }
        case 141: break;
        case 17: 
          { return JsTokenId.OPERATOR_ASSIGNMENT;
          }
        case 142: break;
        case 99: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_TYPEOF;
          }
        case 143: break;
        case 37: 
          { yybegin(INITIAL);
                                     return JsTokenId.STRING_END;
          }
        case 144: break;
        case 29: 
          { return JsTokenId.OPERATOR_BITWISE_AND;
          }
        case 145: break;
        case 24: 
          { return JsTokenId.OPERATOR_GREATER;
          }
        case 146: break;
        case 110: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_FUNCTION;
          }
        case 147: break;
        case 19: 
          { return JsTokenId.BRACKET_RIGHT_PAREN;
          }
        case 148: break;
        case 64: 
          { yypushback(1);
                                     yybegin(REGEXPEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.REGEXP;
                                     }
          }
        case 149: break;
        case 90: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_THROW;
          }
        case 150: break;
        case 67: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_NEW;
          }
        case 151: break;
        case 62: 
          { return JsTokenId.OPERATOR_BITWISE_XOR_ASSIGNMENT;
          }
        case 152: break;
        case 23: 
          { return JsTokenId.OPERATOR_COMMA;
          }
        case 153: break;
        case 71: 
          { return JsTokenId.OPERATOR_EQUALS_EXACTLY;
          }
        case 154: break;
        case 52: 
          { return JsTokenId.OPERATOR_GREATER_EQUALS;
          }
        case 155: break;
        case 45: 
          { return JsTokenId.OPERATOR_NOT_EQUALS;
          }
        case 156: break;
        case 79: 
          { return JsTokenId.KEYWORD_TRUE;
          }
        case 157: break;
        case 57: 
          { return JsTokenId.OPERATOR_AND;
          }
        case 158: break;
        case 5: 
          { return JsTokenId.WHITESPACE;
          }
        case 159: break;
        case 61: 
          { return JsTokenId.OPERATOR_INCREMENT;
          }
        case 160: break;
        case 65: 
          { return JsTokenId.OPERATOR_NOT_EQUALS_EXACTLY;
          }
        case 161: break;
        case 69: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_LET;
          }
        case 162: break;
        case 59: 
          { return JsTokenId.OPERATOR_OR;
          }
        case 163: break;
        case 107: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PACKAGE;
          }
        case 164: break;
        case 77: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_ELSE;
          }
        case 165: break;
        case 70: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_VAR;
          }
        case 166: break;
        case 2: 
          { yypushback(1);
                                   yybegin(INITIAL);
          }
        case 167: break;
        case 21: 
          { return JsTokenId.BRACKET_RIGHT_CURLY;
          }
        case 168: break;
        case 82: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_WITH;
          }
        case 169: break;
        case 40: 
          { yypushback(1);
                                     yybegin(ERROR);
          }
        case 170: break;
        case 25: 
          { return JsTokenId.OPERATOR_LOWER;
          }
        case 171: break;
        case 63: 
          { return JsTokenId.OPERATOR_MODULUS_ASSIGNMENT;
          }
        case 172: break;
        case 73: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT;
          }
        case 173: break;
        case 46: 
          { return JsTokenId.OPERATOR_DECREMENT;
          }
        case 174: break;
        case 97: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_STATIC;
          }
        case 175: break;
        case 41: 
          { yybegin(INITIAL);
                                     return JsTokenId.REGEXP_END;
          }
        case 176: break;
        case 32: 
          { return JsTokenId.OPERATOR_BITWISE_XOR;
          }
        case 177: break;
        case 78: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CASE;
          }
        case 178: break;
        case 1: 
          { yybegin(INITIAL);
                                     if (tokenLength > 0) {
                                         return JsTokenId.EOL;
                                     }
          }
        case 179: break;
        case 38: 
          { yypushback(1);
                                     yybegin(INITIAL);
                                     if (tokenLength -1 > 0) {
                                         return getErrorToken();
                                     }
          }
        case 180: break;
        case 93: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_WHILE;
          }
        case 181: break;
        case 53: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC;
          }
        case 182: break;
        case 80: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_THIS;
          }
        case 183: break;
        case 113: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_INSTANCEOF;
          }
        case 184: break;
        case 96: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_EXPORT;
          }
        case 185: break;
        case 13: 
          { yybegin(STRING);
                                    return JsTokenId.STRING_BEGIN;
          }
        case 186: break;
        case 68: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_FOR;
          }
        case 187: break;
        case 72: 
          { return JsTokenId.OPERATOR_RIGHT_SHIFT_ARITHMETIC_ASSIGNMENT;
          }
        case 188: break;
        case 101: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DELETE;
          }
        case 189: break;
        case 3: 
          { return getErrorToken();
          }
        case 190: break;
        case 6: 
          { if (canFollowLiteral) {
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION;
                                     }
          }
        case 191: break;
        case 85: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_BREAK;
          }
        case 192: break;
        case 31: 
          { return JsTokenId.OPERATOR_PLUS;
          }
        case 193: break;
        case 50: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DO;
          }
        case 194: break;
        case 48: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_IN;
          }
        case 195: break;
        case 43: 
          { if (canFollowLiteral) {
                                       yypushback(1);
                                       yybegin(REGEXP);
                                       return JsTokenId.REGEXP_BEGIN;
                                     } else {
                                       return JsTokenId.OPERATOR_DIVISION_ASSIGNMENT;
                                     }
          }
        case 196: break;
        case 112: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PROTECTED;
          }
        case 197: break;
        case 75: 
          { return JsTokenId.BLOCK_COMMENT;
          }
        case 198: break;
        case 7: 
          { return JsTokenId.OPERATOR_MULTIPLICATION;
          }
        case 199: break;
        case 95: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_RETURN;
          }
        case 200: break;
        case 9: 
          { return JsTokenId.IDENTIFIER;
          }
        case 201: break;
        case 87: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_CONST;
          }
        case 202: break;
        case 81: 
          { return JsTokenId.KEYWORD_NULL;
          }
        case 203: break;
        case 10: 
          { return JsTokenId.NUMBER;
          }
        case 204: break;
        case 66: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_TRY;
          }
        case 205: break;
        case 104: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DEFAULT;
          }
        case 206: break;
        case 54: 
          { return JsTokenId.OPERATOR_LOWER_EQUALS;
          }
        case 207: break;
        case 58: 
          { return JsTokenId.OPERATOR_BITWISE_OR_ASSIGNMENT;
          }
        case 208: break;
        case 98: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_SWITCH;
          }
        case 209: break;
        case 102: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PUBLIC;
          }
        case 210: break;
        case 83: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_VOID;
          }
        case 211: break;
        case 4: 
          { return JsTokenId.EOL;
          }
        case 212: break;
        case 86: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_CATCH;
          }
        case 213: break;
        case 42: 
          { yybegin(LCOMMENTEND);
                                   return JsTokenId.LINE_COMMENT;
          }
        case 214: break;
        case 11: 
          { return JsTokenId.OPERATOR_DOT;
          }
        case 215: break;
        case 91: 
          { return JsTokenId.KEYWORD_FALSE;
          }
        case 216: break;
        case 39: 
          { yypushback(1);
                                     yybegin(SSTRINGEND);
                                     if (tokenLength - 1 > 0) {
                                         return JsTokenId.STRING;
                                     }
          }
        case 217: break;
        case 33: 
          { return JsTokenId.OPERATOR_MODULUS;
          }
        case 218: break;
        case 15: 
          { return JsTokenId.BRACKET_LEFT_BRACKET;
          }
        case 219: break;
        case 109: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.KEYWORD_DEBUGGER;
          }
        case 220: break;
        case 16: 
          { return JsTokenId.BRACKET_RIGHT_BRACKET;
          }
        case 221: break;
        case 106: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_PRIVATE;
          }
        case 222: break;
        case 12: 
          { return JsTokenId.OPERATOR_MINUS;
          }
        case 223: break;
        case 92: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_YIELD;
          }
        case 224: break;
        case 60: 
          { return JsTokenId.OPERATOR_PLUS_ASSIGNMENT;
          }
        case 225: break;
        case 76: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_ENUM;
          }
        case 226: break;
        case 89: 
          { if (!canFollowKeyword) { return JsTokenId.IDENTIFIER; } return JsTokenId.RESERVED_SUPER;
          }
        case 227: break;
        case 34: 
          { 
          }
        case 228: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (input.readLength() > 0) {
        // backup eof
        input.backup(1);
        //and return the text as error token
        return getErrorToken();
    } else {
        return null;
    }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}